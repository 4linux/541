---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Garantindo /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
      with_items:
        - 172.16.1.100 kube-master
        - 172.16.1.101 kube-node1
        - 172.16.1.102 kube-node2
        - 172.16.1.103 kube-infra
        - 172.16.1.202 docker-registry

    - name: Adiciona usuario suporte
      user:
        name: suporte
        shell: /bin/bash
        password : $1$QbUARykG$p2nthVG8AkDvabKPHwboa1
        
    - name: Adiciona usuario analista
      user:
        name: analista
        shell: /bin/bash
        password : $1$QbUARykG$p2nthVG8AkDvabKPHwboa1

    - name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - git
        - vim
        
    - name: Clona repositório com os arquivos do curso para a HOME do usuario suporte
      git:
        repo: 'https://github.com/4linux/541-kubernetes.git'
        dest: /home/suporte/541
        
    - name: Garantir permissão de superusuário para o usuário analista
      lineinfile:
        path: /etc/sudoers
        state: present
        insertafter: "suporte ALL=(ALL) NOPASSWD: ALL"
        line: "analista ALL=(ALL) NOPASSWD: ALL"

    - name: Clona repositório com os arquivos do curso para a HOME do usuario analista
      git:
        repo: 'https://github.com/4linux/541-kubernetes.git'
        dest: /home/analista/541

    - name: Cria o diretório .ssh
      file:
        path: /home/analista/.ssh
        state: directory
        owner: analista
        group: analista
        mode: '0755'
        
    - name: Criando o arquivo authorized_keys
      copy:
        src: files/authorized_keys
        dest: /home/analista/.ssh/authorized_keys
        owner: analista
        group: analista
        mode: 0644

    - name: Criando diretório /nfs
      file:
        path: /nfs
        state: directory
        owner: nobody
        group: nogroup
        mode: '0775'

    - name: Criando diretório /backups
      file:
        path: /backups
        state: directory
        owner: nobody
        group: nogroup
        mode: '0775'

    - name: Instalando o NFS e DNS Server
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - nfs-kernel-server
        - bind9

    - name: Criando o arquivo exports
      lineinfile:
        path: /etc/exports
        line: "{{ item }}"
      with_items:
        - /nfs 172.16.1.0/24(rw,no_root_squash,no_subtree_check)
        - /backups 172.16.1.0/24(rw,no_root_squash,no_subtree_check)

    - name: Reinicia o service do nfs-kernel-server
      systemd:
        state: restarted
        name: nfs-kernel-server

    - name: Criando o arquivo named.conf.local
      copy:
        src: files/named.conf.local
        dest: /etc/bind
        owner: root
        group: bind
        mode: 0644

    - name: Criando o arquivo named.conf.options
      copy:
        src: files/named.conf.options
        dest: /etc/bind
        owner: root
        group: bind
        mode: 0644

    - name: Criando o arquivo 4labs.example
      copy:
        src: files/4labs.example
        dest: /etc/bind
        owner: root
        group: bind
        mode: 0644

    - name: Criando o arquivo 1.16.172.db
      copy:
        src: files/1.16.172.db
        dest: /etc/bind
        owner: root
        group: bind
        mode: 0644

    - name: Reinicia o service do bind9
      systemd:
        state: restarted
        name: bind9
  
    - name: Adiciona uma chave de assinatura apt para o Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Adiciona repositorio apt para versao estavel
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Instala o Docker e suas dependencias
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: Criando o arquivo daemon.json
      copy:
        src: files/daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: '0644'
   
    - name: Cria o diretorio docker.service.d
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        owner: root
        group: root
        mode: '0755'
        
    - name: Reinicia o Docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: Adiciona o usuario suporte no grupo docker
      user:
        name: suporte
        group: docker

    - name: Adiciona o usuario analista no grupo docker
      user:
        name: analista
        group: docker

