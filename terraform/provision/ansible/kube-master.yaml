---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Garantindo /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
      with_items:
        - 172.16.1.100 kube-master
        - 172.16.1.101 kube-node1
        - 172.16.1.102 kube-node2
        - 172.16.1.103 registry

    - name: Adiciona usuario suporte
      user:
        name: suporte
        shell: /bin/bash
        password : $1$QbUARykG$p2nthVG8AkDvabKPHwboa1

    - name: Adiciona o usuario suporte no grupo google-sudoers
      user:
        name: suporte
        group: google-sudoers
        
    - name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - mysql-client
        - nfs-common
        - snapd
        - git
        - vim
        
    - name: Clona repositório com os arquivos do curso para a HOME do usuario suporte
      git:
        repo: 'https://github.com/4linux/4541.git'
        dest: /home/suporte/4541

    - name: Cria o diretório .ssh
      file:
        path: /home/suporte/.ssh
        state: directory
        owner: suporte
        group: suporte
        mode: '0755'
        
    - name: Criando o arquivo id_rsa
      copy:
        src: files/id_rsa
        dest: /home/suporte/.ssh/id_rsa
        owner: suporte
        group: suporte
        mode: 0600
        
    - name: Criando o arquivo id_rsa.pub
      copy:
        src: files/id_rsa.pub
        dest: /home/suporte/.ssh/id_rsa.pub
        owner: suporte
        group: suporte
        mode: 0644        

    - name: Criando o arquivo etcd-v3.3.13-linux-amd64.tar
      copy:
        src: files/etcd-v3.3.13-linux-amd64.tar
        dest: /root/etcd-v3.3.13-linux-amd64.tar
        owner: root
        group: root
        mode: '0644'   

    - name: Adiciona uma chave de assinatura apt para o Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Adiciona repositorio apt para versao estavel
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Instala o Docker e suas dependencias
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce
        - docker-ce-cli
        - containerd.io
      notify:
        - docker status

    - name: Adiciona o usuario suporte no grupo docker
      user:
        name: suporte
        group: docker

    - name: Cria o diretório registry:5000
      file:
        path: /etc/docker/certs.d/registry:5000
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Criando o arquivo ca.crt
      copy:
        src: files/ca.crt
        dest: /etc/docker/certs.d/registry:5000
        owner: suporte
        group: suporte
        mode: '0644'
        
    - name: Criando o arquivo daemon.json
      copy:
        src: files/daemon.json
        dest: /etc/docker/
        owner: root
        group: root
        mode: '0644'
   
    - name: Cria o diretorio docker.service.d
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        owner: root
        group: root
        mode: '0755'
        
    - name: Reinicia o Docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: Remove swap do arquivo /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Desativa o swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Adiciona uma chave de assinatura apt para o Kubernetes
      # shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.gpg
      # args:
      #   creates: /etc/apt/trusted.gpg.d/kubernetes-apt-keyring.gpg
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adiciona repositorio apt para Kubernetes
      apt_repository:
        repo: deb [arch=amd64] https://apt.kubernetes.io/ kubernetes-xenial main
        # repo: deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.21/deb/ /
        state: present
        filename: kubernetes.list

    - name: Instala os pacotes do Kubernetes
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - kubelet=1.21.1-00
        - kubeadm=1.21.1-00
        - kubectl=1.21.1-00

    - name: Reinicia o kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Inicializa o cluster Kubernetes atraves da ferramenta kubeadm
      shell: kubeadm init --apiserver-advertise-address="172.16.1.100" --apiserver-cert-extra-sans="172.16.1.100" --node-name kube-master --pod-network-cidr=192.168.0.0/16 --kubernetes-version=1.21.1 --ignore-preflight-errors=all > /opt/init_cluster
      args:
        creates: /opt/init_cluster

    - name: Cria o diretório .kube para o usuário ansible
      file:
        path: /home/ansible/.kube
        state: directory
        mode: '0755'

    - name: Configura o kubeconfig para o usuario ansible
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ansible/.kube/config
        remote_src: yes

    - name: Definir permissao de acesso ao arquivo config
      file:
        path: /home/ansible/.kube/config
        owner: ansible
        group: ansible
        mode: '0644'

    - name: Cria o diretório .kube para o usuário suporte
      file:
        path: /home/suporte/.kube
        state: directory
        owner: suporte
        group: suporte
        mode: '0755'

    - name: Configura o kubeconfig para o usuario suporte
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/suporte/.kube/config
        remote_src: yes

    - name: Definir permissao de acesso ao arquivo config
      file:
        path: /home/suporte/.kube/config
        owner: suporte
        group: suporte
        mode: '0644'

    - name: Instala a rede calico no cluster
      become: false
      command: kubectl create -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml

    - name: Gera o comando para o join de novos nodes
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copia o comando do join no arquivo local
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started
